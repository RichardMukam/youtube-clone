inline-block has alignment issues. So it is better to use a 
CSS grid instead. Say the width of a div is 300px. If you have,
say, a pfp that's 50px, and video info that's 250px, they all
won't fit within one line.
inline-block is also not vertically aligned
CSS grid will allow us to create perfectly aligned horizontal
layouts.
A grid is a layout that has rows and columns.
No unnecessary spaces!
Isn't a block display (takes up entire line)
Vertically aligned/auto-adjusts when you add another element
into the div
When you add another element in line 14-15, it makes the
second div taller than the first, but they remain vertically
aligned

grid-template-columns and grid-template-rows takes an inf. amount
of arguments. If you add a third value of set pixel size, it'll
create another column sized 200px.

1fr - fr means *free space* (takes up remaining portion of the grid)
The number infront tells us relatively how much of the remaining
space the column gets
If there are two 1fr's, each column labeled 1fr will take up an equal amount of the remaining
size of the grid
Think of it as ratios
If it's 1fr and 2fr, the column labeled 2f will be twice as large as the one labeled 1fr

Grid literally allows us to place elements within a "grid", so 
"inline-block" becomes obsolete. Thus, we can remove them.
Use grid as a substitute for inline-block/block/inline

If there are more elements than columns, the new columns (divs) will wrap
and form a new row (or will go to the next row).

*column-gap* creates spacing (gaps) in  between every column
Put this in the same location as the "display: grid" and "column-template-columns" code
It takes in a pixel count. i.e: 20px;
row-gap creates spacing (gaps) in between every row
Put this in the same location as the "display: grid
*so no need for margin-left in between elements*

Put the display: grid element on the parent of the child divs
<div style="display: grid;">
  <div>div 1</div>
  <div>div 2</div>  
</div>

*Grids are vertically aligned, close unnecessary gaps
Maintain alignment*

When doing the final project, we'll be using 1fr for the video-info-div, 
where pfpdiv will be 50px, and video-details-div will be 1fr (take up the remaining space).
This is the perfect example as to why grid is better: instead of having to randomize values
for the width of the video-details-div, I can simply set the width to 1fr.
fr has proportions.
A column with the size 2fr will be twice as large as the column that is 1fr.
